
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.compiler;

import main.node.expr.constants.*;
import main.node.expr.operations.*;
import main.node.stat.*;
import main.node.expr.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import main.node.*;
import main.node.body.*;
import main.node.vardecl.*;
import main.node.pardecl.*;
import main.node.defdecl.*;
import main.node.program.*;
import main.node.expr.operations.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\115\000\002\002\010\000\002\002\004\000\002\027" +
    "\004\000\002\027\004\000\002\027\002\000\002\026\004" +
    "\000\002\026\002\000\002\025\006\000\002\033\005\000" +
    "\002\033\007\000\002\033\003\000\002\033\005\000\002" +
    "\016\003\000\002\016\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\024\011\000\002\024\010\000\002\023\005\000\002\023" +
    "\003\000\002\022\005\000\002\032\005\000\002\032\003" +
    "\000\002\031\003\000\002\031\004\000\002\015\004\000" +
    "\002\015\002\000\002\012\006\000\002\011\004\000\002" +
    "\011\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\006\000\002\010\004\000\002\010\004" +
    "\000\002\010\012\000\002\010\010\000\002\010\010\000" +
    "\002\010\016\000\002\010\005\000\002\021\013\000\002" +
    "\030\005\000\002\030\003\000\002\007\005\000\002\007" +
    "\003\000\002\014\006\000\002\014\005\000\002\013\022" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\004\000\002\006\004\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\021\005\001\002\000\004\002\274\001" +
    "\002\000\010\013\011\022\ufffd\073\006\001\002\000\010" +
    "\063\273\071\ufff7\072\175\001\002\000\004\071\266\001" +
    "\002\000\010\013\011\022\ufffd\073\006\001\002\000\004" +
    "\073\231\001\002\000\004\022\015\001\002\000\010\013" +
    "\011\022\ufffd\073\006\001\002\000\004\022\ufffe\001\002" +
    "\000\042\004\ufffb\007\ufffb\011\ufffb\023\ufffb\024\ufffb\025" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\034\ufffb" +
    "\042\ufffb\051\ufffb\055\ufffb\073\ufffb\001\002\000\042\004" +
    "\032\007\023\011\027\023\uffdb\024\036\025\031\026\041" +
    "\027\035\030\021\031\046\032\017\034\040\042\026\051" +
    "\045\055\042\073\034\001\002\000\050\033\uffe9\034\uffe9" +
    "\035\uffe9\036\uffe9\040\uffe9\041\uffe9\043\uffe9\044\uffe9\045" +
    "\uffe9\046\uffe9\047\uffe9\050\uffe9\052\uffe9\063\uffe9\064\uffe9" +
    "\067\uffe9\071\uffe9\075\uffe9\076\uffe9\001\002\000\044\004" +
    "\032\007\023\011\027\023\uffdb\024\036\025\031\026\041" +
    "\027\035\030\021\031\046\032\017\034\040\042\026\051" +
    "\045\054\uffdb\055\042\073\133\001\002\000\050\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\040\uffeb\041\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\063\uffeb" +
    "\064\uffeb\067\uffeb\071\uffeb\075\uffeb\076\uffeb\001\002\000" +
    "\050\033\uffb5\034\uffb5\035\uffb5\036\uffb5\040\uffb5\041\uffb5" +
    "\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050\uffb5\052" +
    "\uffb5\063\uffb5\064\uffb5\067\uffb5\071\uffb5\075\uffb5\076\uffb5" +
    "\001\002\000\004\051\223\001\002\000\042\033\uffb7\034" +
    "\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7\043\uffb7\044\uffb7" +
    "\045\uffb7\046\uffb7\047\uffb7\050\uffb7\064\uffb7\067\222\075" +
    "\uffb7\076\uffb7\001\002\000\004\023\221\001\002\000\030" +
    "\024\036\025\031\026\041\027\035\030\021\031\046\032" +
    "\017\034\040\042\026\051\045\073\052\001\002\000\030" +
    "\024\036\025\031\026\041\027\035\030\021\031\046\032" +
    "\017\034\040\042\026\051\045\073\052\001\002\000\042" +
    "\033\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\064\uffb6" +
    "\067\215\075\uffb6\076\uffb6\001\002\000\050\033\uffee\034" +
    "\uffee\035\uffee\036\uffee\040\uffee\041\uffee\043\uffee\044\uffee" +
    "\045\uffee\046\uffee\047\uffee\050\uffee\052\uffee\063\uffee\064" +
    "\uffee\067\uffee\071\uffee\075\uffee\076\uffee\001\002\000\004" +
    "\051\206\001\002\000\044\033\062\034\057\035\067\036" +
    "\065\040\060\041\073\043\066\044\061\045\072\046\064" +
    "\047\063\050\071\052\uffcb\064\204\067\uffcb\075\uffcb\076" +
    "\uffcb\001\002\000\054\033\uffb8\034\uffb8\035\uffb8\036\uffb8" +
    "\040\uffb8\041\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\051\053\063\176\064\uffb8\070\uffcd\071\ufff7" +
    "\072\175\074\uffcd\075\uffb8\076\uffb8\001\002\000\050\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\040\uffec\041\uffec\043\uffec" +
    "\044\uffec\045\uffec\046\uffec\047\uffec\050\uffec\052\uffec\063" +
    "\uffec\064\uffec\067\uffec\071\uffec\075\uffec\076\uffec\001\002" +
    "\000\004\051\156\001\002\000\046\004\ufffc\007\ufffc\011" +
    "\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc" +
    "\031\ufffc\032\ufffc\034\ufffc\042\ufffc\051\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\073\ufffc\001\002\000\030\024\036\025\031" +
    "\026\041\027\035\030\021\031\046\032\017\034\040\042" +
    "\026\051\045\073\052\001\002\000\050\033\uffed\034\uffed" +
    "\035\uffed\036\uffed\040\uffed\041\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\047\uffed\050\uffed\052\uffed\063\uffed\064\uffed" +
    "\067\uffed\071\uffed\075\uffed\076\uffed\001\002\000\006\056" +
    "\ufffb\073\ufffb\001\002\000\006\075\115\076\116\001\002" +
    "\000\006\070\111\074\110\001\002\000\030\024\036\025" +
    "\031\026\041\027\035\030\021\031\046\032\017\034\040" +
    "\042\026\051\045\073\052\001\002\000\050\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\040\uffea\041\uffea\043\uffea\044\uffea" +
    "\045\uffea\046\uffea\047\uffea\050\uffea\052\uffea\063\uffea\064" +
    "\uffea\067\uffea\071\uffea\075\uffea\076\uffea\001\002\000\034" +
    "\033\062\034\057\035\067\036\065\040\060\041\073\043" +
    "\066\044\061\045\072\046\064\047\063\050\071\052\070" +
    "\001\002\000\050\033\uffb7\034\uffb7\035\uffb7\036\uffb7\040" +
    "\uffb7\041\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\052\uffb7\063\uffb7\064\uffb7\067\uffb7\071\uffb7\075" +
    "\uffb7\076\uffb7\001\002\000\050\033\uffb6\034\uffb6\035\uffb6" +
    "\036\uffb6\040\uffb6\041\uffb6\043\uffb6\044\uffb6\045\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\052\uffb6\063\uffb6\064\uffb6\067\uffb6" +
    "\071\uffb6\075\uffb6\076\uffb6\001\002\000\052\033\uffb8\034" +
    "\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\043\uffb8\044\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\053\052\uffb8\063" +
    "\uffb8\064\uffb8\067\uffb8\071\uffb8\075\uffb8\076\uffb8\001\002" +
    "\000\032\024\036\025\031\026\041\027\035\030\021\031" +
    "\046\032\017\034\040\042\026\051\045\052\055\073\052" +
    "\001\002\000\004\052\056\001\002\000\050\033\uffc9\034" +
    "\uffc9\035\uffc9\036\uffc9\040\uffc9\041\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\050\uffc9\052\uffc9\063\uffc9\064" +
    "\uffc9\067\uffc9\071\uffc9\075\uffc9\076\uffc9\001\002\000\050" +
    "\033\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\052\uffca" +
    "\063\uffca\064\uffca\067\uffca\071\uffca\075\uffca\076\uffca\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\050\033\uffbb\034\uffbb\035\uffbb\036\uffbb\040\uffbb" +
    "\041\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050" +
    "\uffbb\052\uffbb\063\uffbb\064\uffbb\067\uffbb\071\uffbb\075\uffbb" +
    "\076\uffbb\001\002\000\030\024\036\025\031\026\041\027" +
    "\035\030\021\031\046\032\017\034\040\042\026\051\045" +
    "\073\052\001\002\000\030\024\036\025\031\026\041\027" +
    "\035\030\021\031\046\032\017\034\040\042\026\051\045" +
    "\073\052\001\002\000\030\024\036\025\031\026\041\027" +
    "\035\030\021\031\046\032\017\034\040\042\026\051\045" +
    "\073\052\001\002\000\050\033\062\034\057\035\067\036" +
    "\065\040\060\041\uffc2\043\066\044\061\045\072\046\064" +
    "\047\063\050\071\052\uffc2\063\uffc2\064\uffc2\067\uffc2\071" +
    "\uffc2\075\uffc2\076\uffc2\001\002\000\050\033\062\034\057" +
    "\035\067\036\065\040\uffbf\041\uffbf\043\uffbf\044\uffbf\045" +
    "\uffbf\046\uffbf\047\uffbf\050\uffbf\052\uffbf\063\uffbf\064\uffbf" +
    "\067\uffbf\071\uffbf\075\uffbf\076\uffbf\001\002\000\050\033" +
    "\062\034\057\035\067\036\065\040\uffbc\041\uffbc\043\uffbc" +
    "\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\052\uffbc\063" +
    "\uffbc\064\uffbc\067\uffbc\071\uffbc\075\uffbc\076\uffbc\001\002" +
    "\000\050\033\uffc5\034\uffc5\035\uffc5\036\uffc5\040\uffc5\041" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\052\uffc5\063\uffc5\064\uffc5\067\uffc5\071\uffc5\075\uffc5\076" +
    "\uffc5\001\002\000\050\033\062\034\057\035\067\036\065" +
    "\040\uffc1\041\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047" +
    "\uffc1\050\uffc1\052\uffc1\063\uffc1\064\uffc1\067\uffc1\071\uffc1" +
    "\075\uffc1\076\uffc1\001\002\000\050\033\uffc4\034\uffc4\035" +
    "\uffc4\036\uffc4\040\uffc4\041\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\046\uffc4\047\uffc4\050\uffc4\052\uffc4\063\uffc4\064\uffc4\067" +
    "\uffc4\071\uffc4\075\uffc4\076\uffc4\001\002\000\050\033\062" +
    "\034\057\035\067\036\065\040\uffbe\041\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\052\uffbe\063\uffbe" +
    "\064\uffbe\067\uffbe\071\uffbe\075\uffbe\076\uffbe\001\002\000" +
    "\050\033\062\034\057\035\067\036\065\040\uffbd\041\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052" +
    "\uffbd\063\uffbd\064\uffbd\067\uffbd\071\uffbd\075\uffbd\076\uffbd" +
    "\001\002\000\050\033\uffc7\034\uffc7\035\067\036\065\040" +
    "\uffc7\041\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\052\uffc7\063\uffc7\064\uffc7\067\uffc7\071\uffc7\075" +
    "\uffc7\076\uffc7\001\002\000\050\033\062\034\057\035\067" +
    "\036\065\040\uffc0\041\uffc0\043\uffc0\044\uffc0\045\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\052\uffc0\063\uffc0\064\uffc0\067\uffc0" +
    "\071\uffc0\075\uffc0\076\uffc0\001\002\000\050\033\062\034" +
    "\057\035\067\036\065\040\uffc3\041\uffc3\043\066\044\061" +
    "\045\072\046\064\047\063\050\071\052\uffc3\063\uffc3\064" +
    "\uffc3\067\uffc3\071\uffc3\075\uffc3\076\uffc3\001\002\000\050" +
    "\033\uffc6\034\uffc6\035\067\036\065\040\uffc6\041\uffc6\043" +
    "\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\052\uffc6" +
    "\063\uffc6\064\uffc6\067\uffc6\071\uffc6\075\uffc6\076\uffc6\001" +
    "\002\000\004\067\114\001\002\000\030\024\036\025\031" +
    "\026\041\027\035\030\021\031\046\032\017\034\040\042" +
    "\026\051\045\073\052\001\002\000\004\067\113\001\002" +
    "\000\044\004\uffd7\007\uffd7\011\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\034\uffd7" +
    "\042\uffd7\051\uffd7\054\uffd7\055\uffd7\073\uffd7\001\002\000" +
    "\044\004\uffda\007\uffda\011\uffda\023\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\034\uffda\042" +
    "\uffda\051\uffda\054\uffda\055\uffda\073\uffda\001\002\000\004" +
    "\067\120\001\002\000\004\067\117\001\002\000\044\004" +
    "\uffd8\007\uffd8\011\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\034\uffd8\042\uffd8\051" +
    "\uffd8\054\uffd8\055\uffd8\073\uffd8\001\002\000\044\004\uffd9" +
    "\007\uffd9\011\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027" +
    "\uffd9\030\uffd9\031\uffd9\032\uffd9\034\uffd9\042\uffd9\051\uffd9" +
    "\054\uffd9\055\uffd9\073\uffd9\001\002\000\006\056\122\073" +
    "\006\001\002\000\004\062\141\001\002\000\004\056\122" +
    "\001\002\000\004\062\125\001\002\000\004\061\126\001" +
    "\002\000\004\062\127\001\002\000\004\010\130\001\002" +
    "\000\004\053\131\001\002\000\042\004\032\007\023\011" +
    "\027\024\036\025\031\026\041\027\035\030\021\031\046" +
    "\032\017\034\040\042\026\051\045\054\uffdb\055\042\073" +
    "\133\001\002\000\004\054\137\001\002\000\050\033\uffb8" +
    "\034\uffb8\035\uffb8\036\uffb8\040\uffb8\041\uffb8\043\uffb8\044" +
    "\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\053\063\134" +
    "\064\uffb8\070\uffcd\074\uffcd\075\uffb8\076\uffb8\001\002\000" +
    "\004\073\135\001\002\000\010\063\134\070\uffcd\074\uffcd" +
    "\001\002\000\006\070\uffce\074\uffce\001\002\000\004\067" +
    "\140\001\002\000\044\004\uffd1\007\uffd1\011\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\034\uffd1\042\uffd1\051\uffd1\054\uffd1\055\uffd1\073\uffd1" +
    "\001\002\000\004\057\142\001\002\000\004\051\143\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\034\033\062\034\057\035\067\036\065\040\060" +
    "\041\073\043\066\044\061\045\072\046\064\047\063\050" +
    "\071\052\145\001\002\000\004\062\146\001\002\000\004" +
    "\060\147\001\002\000\004\053\150\001\002\000\042\004" +
    "\ufffb\007\ufffb\011\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\031\ufffb\032\ufffb\034\ufffb\042\ufffb\051\ufffb\054" +
    "\ufffb\055\ufffb\073\ufffb\001\002\000\006\056\uffcf\062\uffcf" +
    "\001\002\000\042\004\032\007\023\011\027\024\036\025" +
    "\031\026\041\027\035\030\021\031\046\032\017\034\040" +
    "\042\026\051\045\054\uffdb\055\042\073\034\001\002\000" +
    "\004\054\154\001\002\000\056\004\uffdd\006\uffdd\007\uffdd" +
    "\011\uffdd\013\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\034\uffdd\042\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\056\uffdd\062\uffdd\073\uffdd\001" +
    "\002\000\050\033\uffba\034\uffba\035\uffba\036\uffba\040\uffba" +
    "\041\uffba\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\052\uffba\063\uffba\064\uffba\067\uffba\071\uffba\075\uffba" +
    "\076\uffba\001\002\000\004\073\157\001\002\000\004\064" +
    "\160\001\002\000\004\051\161\001\002\000\030\024\036" +
    "\025\031\026\041\027\035\030\021\031\046\032\017\034" +
    "\040\042\026\051\045\073\052\001\002\000\004\052\163" +
    "\001\002\000\004\064\164\001\002\000\004\051\165\001" +
    "\002\000\030\024\036\025\031\026\041\027\035\030\021" +
    "\031\046\032\017\034\040\042\026\051\045\073\052\001" +
    "\002\000\004\052\167\001\002\000\004\064\170\001\002" +
    "\000\004\051\171\001\002\000\030\024\036\025\031\026" +
    "\041\027\035\030\021\031\046\032\017\034\040\042\026" +
    "\051\045\073\052\001\002\000\004\052\173\001\002\000" +
    "\004\052\174\001\002\000\050\033\uffc8\034\uffc8\035\uffc8" +
    "\036\uffc8\040\uffc8\041\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\047\uffc8\050\uffc8\052\uffc8\063\uffc8\064\uffc8\067\uffc8" +
    "\071\uffc8\075\uffc8\076\uffc8\001\002\000\030\024\036\025" +
    "\031\026\041\027\035\030\021\031\046\032\017\034\040" +
    "\042\026\051\045\073\052\001\002\000\004\073\177\001" +
    "\002\000\014\063\176\070\uffcd\071\ufff7\072\175\074\uffcd" +
    "\001\002\000\004\071\ufff9\001\002\000\036\033\062\034" +
    "\057\035\067\036\065\040\060\041\073\043\066\044\061" +
    "\045\072\046\064\047\063\050\071\063\202\071\ufff6\001" +
    "\002\000\004\073\006\001\002\000\004\071\ufff8\001\002" +
    "\000\030\024\036\025\031\026\041\027\035\030\021\031" +
    "\046\032\017\034\040\042\026\051\045\073\052\001\002" +
    "\000\012\052\uffcc\067\uffcc\075\uffcc\076\uffcc\001\002\000" +
    "\030\024\036\025\031\026\041\027\035\030\021\031\046" +
    "\032\017\034\040\042\026\051\045\073\052\001\002\000" +
    "\034\033\062\034\057\035\067\036\065\040\060\041\073" +
    "\043\066\044\061\045\072\046\064\047\063\050\071\052" +
    "\210\001\002\000\004\005\211\001\002\000\004\053\150" +
    "\001\002\000\046\004\uffd3\006\213\007\uffd3\011\uffd3\023" +
    "\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3" +
    "\032\uffd3\034\uffd3\042\uffd3\051\uffd3\054\uffd3\055\uffd3\073" +
    "\uffd3\001\002\000\004\053\150\001\002\000\044\004\uffd4" +
    "\007\uffd4\011\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\034\uffd4\042\uffd4\051\uffd4" +
    "\054\uffd4\055\uffd4\073\uffd4\001\002\000\044\004\uffd5\007" +
    "\uffd5\011\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\034\uffd5\042\uffd5\051\uffd5\054" +
    "\uffd5\055\uffd5\073\uffd5\001\002\000\034\033\062\034\057" +
    "\035\067\036\065\040\060\041\073\043\066\044\061\045" +
    "\072\046\064\047\063\050\071\067\217\001\002\000\044" +
    "\004\uffd0\007\uffd0\011\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\042\uffd0" +
    "\051\uffd0\054\uffd0\055\uffd0\073\uffd0\001\002\000\050\033" +
    "\062\034\057\035\067\036\065\040\uffb9\041\uffb9\043\066" +
    "\044\061\045\072\046\064\047\063\050\071\052\uffb9\063" +
    "\uffb9\064\uffb9\067\uffb9\071\uffb9\075\uffb9\076\uffb9\001\002" +
    "\000\004\002\001\001\002\000\044\004\uffd6\007\uffd6\011" +
    "\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\034\uffd6\042\uffd6\051\uffd6\054\uffd6\055" +
    "\uffd6\073\uffd6\001\002\000\030\024\036\025\031\026\041" +
    "\027\035\030\021\031\046\032\017\034\040\042\026\051" +
    "\045\073\052\001\002\000\034\033\062\034\057\035\067" +
    "\036\065\040\060\041\073\043\066\044\061\045\072\046" +
    "\064\047\063\050\071\052\225\001\002\000\004\010\226" +
    "\001\002\000\004\053\150\001\002\000\044\004\uffd2\007" +
    "\uffd2\011\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\032\uffd2\034\uffd2\042\uffd2\051\uffd2\054" +
    "\uffd2\055\uffd2\073\uffd2\001\002\000\006\023\uffdc\054\uffdc" +
    "\001\002\000\004\051\232\001\002\000\010\012\236\052" +
    "\240\073\233\001\002\000\006\064\uffe1\071\uffe1\001\002" +
    "\000\004\071\263\001\002\000\006\064\261\071\uffe2\001" +
    "\002\000\004\073\260\001\002\000\004\052\255\001\002" +
    "\000\006\053\uffde\071\244\001\002\000\006\052\uffe5\067" +
    "\242\001\002\000\006\012\236\073\233\001\002\000\004" +
    "\052\uffe6\001\002\000\014\014\254\015\252\016\251\017" +
    "\247\020\253\001\002\000\004\053\150\001\002\000\010" +
    "\013\uffe7\022\uffe7\073\uffe7\001\002\000\010\052\ufff0\053" +
    "\ufff0\067\ufff0\001\002\000\004\053\uffdf\001\002\000\010" +
    "\052\ufff1\053\ufff1\067\ufff1\001\002\000\010\052\ufff2\053" +
    "\ufff2\067\ufff2\001\002\000\010\052\uffef\053\uffef\067\uffef" +
    "\001\002\000\010\052\ufff3\053\ufff3\067\ufff3\001\002\000" +
    "\006\053\uffde\071\244\001\002\000\004\053\150\001\002" +
    "\000\010\013\uffe8\022\uffe8\073\uffe8\001\002\000\006\064" +
    "\uffe0\071\uffe0\001\002\000\006\012\236\073\233\001\002" +
    "\000\004\071\uffe3\001\002\000\014\014\254\015\252\016" +
    "\251\017\247\020\253\001\002\000\006\052\uffe4\067\uffe4" +
    "\001\002\000\004\022\uffff\001\002\000\030\014\254\015" +
    "\252\016\251\017\247\020\253\025\031\026\041\027\035" +
    "\030\021\031\046\032\017\001\002\000\004\067\ufff5\001" +
    "\002\000\004\067\272\001\002\000\004\067\ufff4\001\002" +
    "\000\052\004\ufffa\007\ufffa\011\ufffa\013\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\042\ufffa\051\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\073\ufffa\001\002\000\004\073\006\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\272\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\024\012\025\007\027\011\033\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\024\012\025\007\027" +
    "\264\033\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\024\012\025\007\027\013\033\006\001\001\000" +
    "\002\001\001\000\004\026\015\001\001\000\026\006\032" +
    "\007\042\010\017\011\024\013\023\014\027\017\021\025" +
    "\036\030\043\033\006\001\001\000\002\001\001\000\022" +
    "\006\032\007\042\010\017\011\227\013\023\014\027\017" +
    "\021\030\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\217\013\047\014\050\017\021\001\001\000\012" +
    "\006\215\013\047\014\050\017\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\006\154\013\047\014\050\017\021" +
    "\001\001\000\002\001\001\000\004\026\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\006\046\013\047" +
    "\014\050\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\032\007\053\013\047\014\050\017\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\006\106\013\047\014\050\017\021\001\001\000" +
    "\012\006\105\013\047\014\050\017\021\001\001\000\012" +
    "\006\104\013\047\014\050\017\021\001\001\000\012\006" +
    "\103\013\047\014\050\017\021\001\001\000\012\006\102" +
    "\013\047\014\050\017\021\001\001\000\012\006\101\013" +
    "\047\014\050\017\021\001\001\000\012\006\100\013\047" +
    "\014\050\017\021\001\001\000\012\006\077\013\047\014" +
    "\050\017\021\001\001\000\012\006\076\013\047\014\050" +
    "\017\021\001\001\000\002\001\001\000\012\006\075\013" +
    "\047\014\050\017\021\001\001\000\012\006\074\013\047" +
    "\014\050\017\021\001\001\000\012\006\073\013\047\014" +
    "\050\017\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\032\007\111\013\047" +
    "\014\050\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\122\025" +
    "\036\033\006\001\001\000\002\001\001\000\004\021\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\006\032" +
    "\007\042\010\017\011\131\013\023\014\027\017\021\030" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\006\143\013\047\014\050\017\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\150\001\001\000\004\026\151\001\001\000" +
    "\002\001\001\000\026\006\032\007\042\010\017\011\152" +
    "\013\023\014\027\017\021\025\036\030\043\033\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\032\007\161\013\047\014\050\017\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\032\007\165\013\047\014\050\017\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\032\007\171\013\047\014\050\017\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\006\200\013\047\014\050\017\021\001\001\000\006" +
    "\030\135\033\177\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\202\001\001\000\002" +
    "\001\001\000\014\006\032\007\204\013\047\014\050\017" +
    "\021\001\001\000\002\001\001\000\012\006\206\013\047" +
    "\014\050\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\211\001\001\000\002\001\001\000\004" +
    "\012\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\223\013\047\014" +
    "\050\017\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\226\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\022\240\023\236\031\234" +
    "\032\233\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\244\001\001\000\002\001\001\000\012\022\240\023" +
    "\242\031\234\032\233\001\001\000\002\001\001\000\004" +
    "\020\247\001\001\000\004\012\245\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\255\001\001\000\004\012\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\031\234\032\261\001" +
    "\001\000\002\001\001\000\004\020\263\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\267\017\270\020" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\177\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int outer_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int outer_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<DeclsOperationNode> outer_declaration = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inner_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inner_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VariableDeclarationOperationNode> inner_declaration = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<StatementOperationNode> statements = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProgramOperationNode(outer_declaration, inner_declaration, statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclsOperationNode> list = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0, (DeclsOperationNode) declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclsOperationNode> list = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0, (DeclsOperationNode) declaration);RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		 ArrayList<DeclsOperationNode> list = new ArrayList<>();
        RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VariableDeclarationOperationNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VariableDeclarationOperationNode> list = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((VariableDeclarationOperationNode) declaration); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<VariableDeclarationOperationNode> RESULT =null;
		 ArrayList<VariableDeclarationOperationNode> list = new ArrayList<>();
                                    RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VariableOptionalInitializerNodeOperator> vars = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeOrConstantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrConstantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object typeOrConstant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new VariableDeclarationOperationNode(vars,typeOrConstant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VariableOptionalInitializerNodeOperator> list = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier))); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VariableOptionalInitializerNodeOperator> list = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier), expression) );
                                                                            RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                  ArrayList<VariableOptionalInitializerNodeOperator> list = new ArrayList<>();
                                            list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier)));
                                            RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VariableOptionalInitializerNodeOperator> list = new ArrayList<>();
                                                                               list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier),expression));
                                                                               RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=constant;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		RESULT=Type.INTEGER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;
		RESULT=Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT=Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;
		RESULT=Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Object RESULT =null;
		RESULT=Type.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Object RESULT =null;
		RESULT=new TrueConstantNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Object RESULT =null;
		RESULT=new FalseConstantNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int e = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new IntegerConstNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new DoubleConstNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new CharConstantNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new StringConstantNode(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<ParenthesisDeclarationOperationNode> declarations = (ArrayList<ParenthesisDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DefDeclarationNode(declarations, new IdentifierNode(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DefDeclarationNode(new IdentifierNode(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParenthesisDeclarationOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParenthesisDeclarationOperationNode> list = (ArrayList<ParenthesisDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParenthesisDeclarationOperationNode)declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParenthesisDeclarationOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParenthesisDeclarationOperationNode> list = new ArrayList<>();
                    list.add((ParenthesisDeclarationOperationNode)declaration);
                    RESULT= list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParenthesisVariablesNode> list = (ArrayList<ParenthesisVariablesNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisDeclarationOperationNode(list,type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<ParenthesisVariablesNode> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pvar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParenthesisVariablesNode> list = (ArrayList<ParenthesisVariablesNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParenthesisVariablesNode) pvar); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<ParenthesisVariablesNode> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParenthesisVariablesNode> list = new ArrayList<>();
                                                          list.add((ParenthesisVariablesNode) var);
                                                          RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisVariablesNode(false,new IdentifierNode(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisVariablesNode(true,new IdentifierNode(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VariableDeclarationOperationNode> declarations = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<StatementOperationNode> statements = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new BodyOperationNode(declarations, statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              ArrayList<StatementOperationNode> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<StatementOperationNode> list = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0,(StatementOperationNode) statement); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              ArrayList<StatementOperationNode> RESULT =null;
		 ArrayList<StatementOperationNode> list = new ArrayList<>();
                                                  RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IdentifierNode> vars_list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ReadOperationNode(vars_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new WriteOperationNode(expression_list,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new WriteOperationNode(expression_list,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<IdentifierNode> vars_list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignOperationNode(vars_list,expression_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= MapSum SEMI 
            {
              Object RESULT =null;
		int map_sumleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int map_sumright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object map_sum = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= map_sum;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object function_call = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= function_call;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ifBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenElseOperationNode(expression,ifBody,elseBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenOperationNode(expression,ifBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object whileBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileOperationNode(expression,whileBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= LET VarDecls GoWhen GoWhen DOT OTHER DOT DO LBRAC Statements RBRAC SEMI 
            {
              Object RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ArrayList<VariableDeclarationOperationNode> declarations = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int firstleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object first = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int secondleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int secondright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object second = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<StatementOperationNode> stats = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new LetGoWhen(declarations, first,second,stats);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new ReturnStatementNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // GoWhen ::= GO DOT WHEN LPAR Expr RPAR DOT LOOP Body 
            {
              Object RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new GoWhen(expr,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("GoWhen",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Vars ::= ID PIPE Vars 
            {
              ArrayList<IdentifierNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<IdentifierNode> list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new IdentifierNode(attrib));
                                     RESULT = list;
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Vars ::= ID 
            {
              ArrayList<IdentifierNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<IdentifierNode> list = new ArrayList<>();
                    list.add(new IdentifierNode(attrib));
                    RESULT = list;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExpressionOperationNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExpressionOperationNode> list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add((ExpressionOperationNode) attrib);
                                          RESULT = list;
                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exprs ::= Expr 
            {
              ArrayList<ExpressionOperationNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ExpressionOperationNode> list = new ArrayList<>();
                       list.add((ExpressionOperationNode) attrib);
                       RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExpressionOperationNode> ref = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallNode(new IdentifierNode(attrib), ref);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallNode(new IdentifierNode(attrib)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MapSum ::= MAPSUM LPAR ID COMMA LPAR Exprs RPAR COMMA LPAR Exprs RPAR COMMA LPAR Exprs RPAR RPAR 
            {
              Object RESULT =null;
		int funNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).left;
		int funNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)).right;
		String funName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-13)).value;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		ArrayList<ExpressionOperationNode> expr1 = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		ArrayList<ExpressionOperationNode> expr2 = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int expr3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExpressionOperationNode> expr3 = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new MapSum(new IdentifierNode(funName),expr1,expr2,expr3);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MapSum",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"PLUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"MINUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"TIMES",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"DIV",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"AND",e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"OR",e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"GT",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"GE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"LT",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"LE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"EQ",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"NE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationNode("MINUS",e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationNode("NOT",e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= MapSum 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Constant 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
