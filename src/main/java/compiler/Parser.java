
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package main.java.compiler;

import main.node.expr.constants.*;
import main.node.expr.operations.*;
import main.node.stat.*;
import main.node.expr.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import main.node.*;
import main.node.body.*;
import main.node.vardecl.*;
import main.node.pardecl.*;
import main.node.defdecl.*;
import main.node.program.*;
import main.node.expr.operations.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\010\000\002\002\004\000\002\025" +
    "\004\000\002\025\004\000\002\025\002\000\002\024\004" +
    "\000\002\024\002\000\002\023\006\000\002\031\005\000" +
    "\002\031\007\000\002\031\003\000\002\031\005\000\002" +
    "\015\003\000\002\015\003\000\002\017\003\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\022\011\000\002\022\010\000\002\021\005\000\002\021" +
    "\003\000\002\020\005\000\002\030\005\000\002\030\003" +
    "\000\002\027\003\000\002\027\004\000\002\014\004\000" +
    "\002\014\002\000\002\012\006\000\002\011\004\000\002" +
    "\011\002\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\006\000\002\010\004\000\002\010\012" +
    "\000\002\010\010\000\002\010\011\000\002\010\012\000" +
    "\002\010\010\000\002\010\005\000\002\026\005\000\002" +
    "\026\003\000\002\007\005\000\002\007\003\000\002\013" +
    "\006\000\002\013\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\004\000\002\006\004" +
    "\000\002\006\003\000\002\006\003\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\024\005\001\002\000\004\002\235\001" +
    "\002\000\010\016\011\025\ufffd\065\006\001\002\000\010" +
    "\057\234\063\ufff7\064\131\001\002\000\004\063\227\001" +
    "\002\000\012\010\ufffd\016\011\025\ufffd\065\006\001\002" +
    "\000\004\065\172\001\002\000\004\025\015\001\002\000" +
    "\012\010\ufffd\016\011\025\ufffd\065\006\001\002\000\006" +
    "\010\ufffe\025\ufffe\001\002\000\040\004\ufffb\007\ufffb\011" +
    "\ufffb\014\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\036\ufffb\044\ufffb\053\ufffb\065\ufffb\001" +
    "\002\000\040\004\031\007\042\011\023\014\026\026\uffdb" +
    "\027\030\030\036\031\034\032\021\033\044\034\017\036" +
    "\037\044\025\053\043\065\033\001\002\000\050\035\uffe9" +
    "\036\uffe9\037\uffe9\040\uffe9\042\uffe9\043\uffe9\045\uffe9\046" +
    "\uffe9\047\uffe9\050\uffe9\051\uffe9\052\uffe9\054\uffe9\057\uffe9" +
    "\060\uffe9\061\uffe9\063\uffe9\067\uffe9\070\uffe9\001\002\000" +
    "\042\004\031\007\042\011\023\014\026\026\uffdb\027\030" +
    "\030\036\031\034\032\021\033\044\034\017\036\037\044" +
    "\025\053\043\056\uffdb\065\110\001\002\000\050\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\054\uffeb\057\uffeb" +
    "\060\uffeb\061\uffeb\063\uffeb\067\uffeb\070\uffeb\001\002\000" +
    "\050\035\uffb8\036\uffb8\037\uffb8\040\uffb8\042\uffb8\043\uffb8" +
    "\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\052\uffb8\054" +
    "\uffb8\057\uffb8\060\uffb8\061\uffb8\063\uffb8\067\uffb8\070\uffb8" +
    "\001\002\000\004\053\162\001\002\000\004\026\161\001" +
    "\002\000\026\027\030\030\036\031\034\032\021\033\044" +
    "\034\017\036\037\044\025\053\043\065\047\001\002\000" +
    "\026\027\030\030\036\031\034\032\021\033\044\034\017" +
    "\036\037\044\025\053\043\065\047\001\002\000\042\035" +
    "\uffb9\036\uffb9\037\uffb9\040\uffb9\042\uffb9\043\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\060\uffb9\061" +
    "\155\067\uffb9\070\uffb9\001\002\000\050\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\042\uffee\043\uffee\045\uffee\046\uffee\047" +
    "\uffee\050\uffee\051\uffee\052\uffee\054\uffee\057\uffee\060\uffee" +
    "\061\uffee\063\uffee\067\uffee\070\uffee\001\002\000\004\053" +
    "\142\001\002\000\044\035\060\036\054\037\064\040\062" +
    "\042\055\043\070\045\063\046\056\047\067\050\061\051" +
    "\057\052\066\054\uffcc\060\140\061\uffcc\067\uffcc\070\uffcc" +
    "\001\002\000\054\035\uffba\036\uffba\037\uffba\040\uffba\042" +
    "\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba" +
    "\052\uffba\053\050\057\132\060\uffba\062\uffce\063\ufff7\064" +
    "\131\066\uffce\067\uffba\070\uffba\001\002\000\050\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\042\uffec\043\uffec\045\uffec\046" +
    "\uffec\047\uffec\050\uffec\051\uffec\052\uffec\054\uffec\057\uffec" +
    "\060\uffec\061\uffec\063\uffec\067\uffec\070\uffec\001\002\000" +
    "\042\004\ufffc\007\ufffc\011\ufffc\014\ufffc\026\ufffc\027\ufffc" +
    "\030\ufffc\031\ufffc\032\ufffc\033\ufffc\034\ufffc\036\ufffc\044" +
    "\ufffc\053\ufffc\056\ufffc\065\ufffc\001\002\000\050\035\uffed" +
    "\036\uffed\037\uffed\040\uffed\042\uffed\043\uffed\045\uffed\046" +
    "\uffed\047\uffed\050\uffed\051\uffed\052\uffed\054\uffed\057\uffed" +
    "\060\uffed\061\uffed\063\uffed\067\uffed\070\uffed\001\002\000" +
    "\026\027\030\030\036\031\034\032\021\033\044\034\017" +
    "\036\037\044\025\053\043\065\047\001\002\000\006\067" +
    "\124\070\125\001\002\000\006\062\120\066\117\001\002" +
    "\000\010\010\ufffd\016\011\065\006\001\002\000\026\027" +
    "\030\030\036\031\034\032\021\033\044\034\017\036\037" +
    "\044\025\053\043\065\047\001\002\000\050\035\uffea\036" +
    "\uffea\037\uffea\040\uffea\042\uffea\043\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\052\uffea\054\uffea\057\uffea\060" +
    "\uffea\061\uffea\063\uffea\067\uffea\070\uffea\001\002\000\034" +
    "\035\060\036\054\037\064\040\062\042\055\043\070\045" +
    "\063\046\056\047\067\050\061\051\057\052\066\054\065" +
    "\001\002\000\050\035\uffb9\036\uffb9\037\uffb9\040\uffb9\042" +
    "\uffb9\043\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\054\uffb9\057\uffb9\060\uffb9\061\uffb9\063\uffb9\067" +
    "\uffb9\070\uffb9\001\002\000\052\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\050\054\uffba\057\uffba\060\uffba" +
    "\061\uffba\063\uffba\067\uffba\070\uffba\001\002\000\030\027" +
    "\030\030\036\031\034\032\021\033\044\034\017\036\037" +
    "\044\025\053\043\054\052\065\047\001\002\000\004\054" +
    "\053\001\002\000\050\035\uffca\036\uffca\037\uffca\040\uffca" +
    "\042\uffca\043\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\054\uffca\057\uffca\060\uffca\061\uffca\063\uffca" +
    "\067\uffca\070\uffca\001\002\000\050\035\uffcb\036\uffcb\037" +
    "\uffcb\040\uffcb\042\uffcb\043\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\054\uffcb\057\uffcb\060\uffcb\061" +
    "\uffcb\063\uffcb\067\uffcb\070\uffcb\001\002\000\026\027\030" +
    "\030\036\031\034\032\021\033\044\034\017\036\037\044" +
    "\025\053\043\065\047\001\002\000\026\027\030\030\036" +
    "\031\034\032\021\033\044\034\017\036\037\044\025\053" +
    "\043\065\047\001\002\000\026\027\030\030\036\031\034" +
    "\032\021\033\044\034\017\036\037\044\025\053\043\065" +
    "\047\001\002\000\026\027\030\030\036\031\034\032\021" +
    "\033\044\034\017\036\037\044\025\053\043\065\047\001" +
    "\002\000\026\027\030\030\036\031\034\032\021\033\044" +
    "\034\017\036\037\044\025\053\043\065\047\001\002\000" +
    "\026\027\030\030\036\031\034\032\021\033\044\034\017" +
    "\036\037\044\025\053\043\065\047\001\002\000\026\027" +
    "\030\030\036\031\034\032\021\033\044\034\017\036\037" +
    "\044\025\053\043\065\047\001\002\000\026\027\030\030" +
    "\036\031\034\032\021\033\044\034\017\036\037\044\025" +
    "\053\043\065\047\001\002\000\026\027\030\030\036\031" +
    "\034\032\021\033\044\034\017\036\037\044\025\053\043" +
    "\065\047\001\002\000\050\035\uffbd\036\uffbd\037\uffbd\040" +
    "\uffbd\042\uffbd\043\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\054\uffbd\057\uffbd\060\uffbd\061\uffbd\063" +
    "\uffbd\067\uffbd\070\uffbd\001\002\000\026\027\030\030\036" +
    "\031\034\032\021\033\044\034\017\036\037\044\025\053" +
    "\043\065\047\001\002\000\026\027\030\030\036\031\034" +
    "\032\021\033\044\034\017\036\037\044\025\053\043\065" +
    "\047\001\002\000\026\027\030\030\036\031\034\032\021" +
    "\033\044\034\017\036\037\044\025\053\043\065\047\001" +
    "\002\000\050\035\060\036\054\037\064\040\062\042\055" +
    "\043\uffc4\045\063\046\056\047\067\050\061\051\057\052" +
    "\066\054\uffc4\057\uffc4\060\uffc4\061\uffc4\063\uffc4\067\uffc4" +
    "\070\uffc4\001\002\000\050\035\060\036\054\037\064\040" +
    "\062\042\uffc1\043\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1" +
    "\051\uffc1\052\uffc1\054\uffc1\057\uffc1\060\uffc1\061\uffc1\063" +
    "\uffc1\067\uffc1\070\uffc1\001\002\000\050\035\060\036\054" +
    "\037\064\040\062\042\uffbe\043\uffbe\045\uffbe\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\052\uffbe\054\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\063\uffbe\067\uffbe\070\uffbe\001\002\000\050\035" +
    "\uffc7\036\uffc7\037\uffc7\040\uffc7\042\uffc7\043\uffc7\045\uffc7" +
    "\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\063\uffc7\067\uffc7\070\uffc7\001\002" +
    "\000\050\035\060\036\054\037\064\040\062\042\uffc3\043" +
    "\uffc3\045\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\054\uffc3\057\uffc3\060\uffc3\061\uffc3\063\uffc3\067\uffc3\070" +
    "\uffc3\001\002\000\050\035\uffc6\036\uffc6\037\uffc6\040\uffc6" +
    "\042\uffc6\043\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051" +
    "\uffc6\052\uffc6\054\uffc6\057\uffc6\060\uffc6\061\uffc6\063\uffc6" +
    "\067\uffc6\070\uffc6\001\002\000\050\035\060\036\054\037" +
    "\064\040\062\042\uffc0\043\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\054\uffc0\057\uffc0\060\uffc0\061" +
    "\uffc0\063\uffc0\067\uffc0\070\uffc0\001\002\000\050\035\uffc9" +
    "\036\uffc9\037\064\040\062\042\uffc9\043\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\054\uffc9\057\uffc9" +
    "\060\uffc9\061\uffc9\063\uffc9\067\uffc9\070\uffc9\001\002\000" +
    "\050\035\060\036\054\037\064\040\062\042\uffbf\043\uffbf" +
    "\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052\uffbf\054" +
    "\uffbf\057\uffbf\060\uffbf\061\uffbf\063\uffbf\067\uffbf\070\uffbf" +
    "\001\002\000\050\035\060\036\054\037\064\040\062\042" +
    "\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2" +
    "\052\uffc2\054\uffc2\057\uffc2\060\uffc2\061\uffc2\063\uffc2\067" +
    "\uffc2\070\uffc2\001\002\000\050\035\060\036\054\037\064" +
    "\040\062\042\uffc5\043\uffc5\045\063\046\056\047\067\050" +
    "\061\051\057\052\066\054\uffc5\057\uffc5\060\uffc5\061\uffc5" +
    "\063\uffc5\067\uffc5\070\uffc5\001\002\000\050\035\uffc8\036" +
    "\uffc8\037\064\040\062\042\uffc8\043\uffc8\045\uffc8\046\uffc8" +
    "\047\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\057\uffc8\060" +
    "\uffc8\061\uffc8\063\uffc8\067\uffc8\070\uffc8\001\002\000\004" +
    "\010\106\001\002\000\040\004\031\007\042\011\023\014" +
    "\026\026\uffdb\027\030\030\036\031\034\032\021\033\044" +
    "\034\017\036\037\044\025\053\043\065\110\001\002\000" +
    "\004\026\114\001\002\000\050\035\uffba\036\uffba\037\uffba" +
    "\040\uffba\042\uffba\043\uffba\045\uffba\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\052\uffba\053\050\057\111\060\uffba\062\uffce" +
    "\066\uffce\067\uffba\070\uffba\001\002\000\004\065\112\001" +
    "\002\000\010\057\111\062\uffce\066\uffce\001\002\000\006" +
    "\062\uffcf\066\uffcf\001\002\000\004\007\115\001\002\000" +
    "\004\061\116\001\002\000\042\004\uffd3\007\uffd3\011\uffd3" +
    "\014\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033" +
    "\uffd3\034\uffd3\036\uffd3\044\uffd3\053\uffd3\056\uffd3\065\uffd3" +
    "\001\002\000\004\061\123\001\002\000\026\027\030\030" +
    "\036\031\034\032\021\033\044\034\017\036\037\044\025" +
    "\053\043\065\047\001\002\000\004\061\122\001\002\000" +
    "\042\004\uffd7\007\uffd7\011\uffd7\014\uffd7\026\uffd7\027\uffd7" +
    "\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\036\uffd7\044" +
    "\uffd7\053\uffd7\056\uffd7\065\uffd7\001\002\000\042\004\uffda" +
    "\007\uffda\011\uffda\014\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\032\uffda\033\uffda\034\uffda\036\uffda\044\uffda\053\uffda" +
    "\056\uffda\065\uffda\001\002\000\004\061\127\001\002\000" +
    "\004\061\126\001\002\000\042\004\uffd8\007\uffd8\011\uffd8" +
    "\014\uffd8\026\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\034\uffd8\036\uffd8\044\uffd8\053\uffd8\056\uffd8\065\uffd8" +
    "\001\002\000\042\004\uffd9\007\uffd9\011\uffd9\014\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9" +
    "\036\uffd9\044\uffd9\053\uffd9\056\uffd9\065\uffd9\001\002\000" +
    "\050\035\uffbc\036\uffbc\037\uffbc\040\uffbc\042\uffbc\043\uffbc" +
    "\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\054" +
    "\uffbc\057\uffbc\060\uffbc\061\uffbc\063\uffbc\067\uffbc\070\uffbc" +
    "\001\002\000\026\027\030\030\036\031\034\032\021\033" +
    "\044\034\017\036\037\044\025\053\043\065\047\001\002" +
    "\000\004\065\133\001\002\000\014\057\132\062\uffce\063" +
    "\ufff7\064\131\066\uffce\001\002\000\004\063\ufff9\001\002" +
    "\000\036\035\060\036\054\037\064\040\062\042\055\043" +
    "\070\045\063\046\056\047\067\050\061\051\057\052\066" +
    "\057\136\063\ufff6\001\002\000\004\065\006\001\002\000" +
    "\004\063\ufff8\001\002\000\026\027\030\030\036\031\034" +
    "\032\021\033\044\034\017\036\037\044\025\053\043\065" +
    "\047\001\002\000\012\054\uffcd\061\uffcd\067\uffcd\070\uffcd" +
    "\001\002\000\026\027\030\030\036\031\034\032\021\033" +
    "\044\034\017\036\037\044\025\053\043\065\047\001\002" +
    "\000\034\035\060\036\054\037\064\040\062\042\055\043" +
    "\070\045\063\046\056\047\067\050\061\051\057\052\066" +
    "\054\144\001\002\000\004\005\145\001\002\000\004\055" +
    "\146\001\002\000\040\004\ufffb\007\ufffb\011\ufffb\014\ufffb" +
    "\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb\036" +
    "\ufffb\044\ufffb\053\ufffb\056\ufffb\065\ufffb\001\002\000\044" +
    "\004\uffd4\006\150\007\uffd4\011\uffd4\014\uffd4\026\uffd4\027" +
    "\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\036\uffd4" +
    "\044\uffd4\053\uffd4\056\uffd4\065\uffd4\001\002\000\004\055" +
    "\146\001\002\000\042\004\uffd5\007\uffd5\011\uffd5\014\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034" +
    "\uffd5\036\uffd5\044\uffd5\053\uffd5\056\uffd5\065\uffd5\001\002" +
    "\000\040\004\031\007\042\011\023\014\026\027\030\030" +
    "\036\031\034\032\021\033\044\034\017\036\037\044\025" +
    "\053\043\056\uffdb\065\033\001\002\000\004\056\154\001" +
    "\002\000\054\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\013\uffdd\014\uffdd\016\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036\uffdd\044\uffdd" +
    "\053\uffdd\056\uffdd\065\uffdd\001\002\000\042\004\uffd6\007" +
    "\uffd6\011\uffd6\014\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\036\uffd6\044\uffd6\053\uffd6\056" +
    "\uffd6\065\uffd6\001\002\000\034\035\060\036\054\037\064" +
    "\040\062\042\055\043\070\045\063\046\056\047\067\050" +
    "\061\051\057\052\066\061\157\001\002\000\042\004\uffd0" +
    "\007\uffd0\011\uffd0\014\uffd0\026\uffd0\027\uffd0\030\uffd0\031" +
    "\uffd0\032\uffd0\033\uffd0\034\uffd0\036\uffd0\044\uffd0\053\uffd0" +
    "\056\uffd0\065\uffd0\001\002\000\050\035\060\036\054\037" +
    "\064\040\062\042\uffbb\043\uffbb\045\063\046\056\047\067" +
    "\050\061\051\057\052\066\054\uffbb\057\uffbb\060\uffbb\061" +
    "\uffbb\063\uffbb\067\uffbb\070\uffbb\001\002\000\004\002\001" +
    "\001\002\000\026\027\030\030\036\031\034\032\021\033" +
    "\044\034\017\036\037\044\025\053\043\065\047\001\002" +
    "\000\034\035\060\036\054\037\064\040\062\042\055\043" +
    "\070\045\063\046\056\047\067\050\061\051\057\052\066" +
    "\054\164\001\002\000\004\012\165\001\002\000\004\055" +
    "\146\001\002\000\044\004\uffd1\007\uffd1\011\uffd1\013\167" +
    "\014\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\036\uffd1\044\uffd1\053\uffd1\056\uffd1\065\uffd1" +
    "\001\002\000\004\055\146\001\002\000\042\004\uffd2\007" +
    "\uffd2\011\uffd2\014\uffd2\026\uffd2\027\uffd2\030\uffd2\031\uffd2" +
    "\032\uffd2\033\uffd2\034\uffd2\036\uffd2\044\uffd2\053\uffd2\056" +
    "\uffd2\065\uffd2\001\002\000\006\026\uffdc\056\uffdc\001\002" +
    "\000\004\053\173\001\002\000\010\015\177\054\201\065" +
    "\174\001\002\000\006\060\uffe1\063\uffe1\001\002\000\004" +
    "\063\224\001\002\000\006\060\222\063\uffe2\001\002\000" +
    "\004\065\221\001\002\000\004\054\216\001\002\000\006" +
    "\055\uffde\063\205\001\002\000\006\054\uffe5\061\203\001" +
    "\002\000\006\015\177\065\174\001\002\000\004\054\uffe6" +
    "\001\002\000\014\017\215\020\213\021\212\022\210\023" +
    "\214\001\002\000\004\055\146\001\002\000\012\010\uffe7" +
    "\016\uffe7\025\uffe7\065\uffe7\001\002\000\010\054\ufff0\055" +
    "\ufff0\061\ufff0\001\002\000\004\055\uffdf\001\002\000\010" +
    "\054\ufff1\055\ufff1\061\ufff1\001\002\000\010\054\ufff2\055" +
    "\ufff2\061\ufff2\001\002\000\010\054\uffef\055\uffef\061\uffef" +
    "\001\002\000\010\054\ufff3\055\ufff3\061\ufff3\001\002\000" +
    "\006\055\uffde\063\205\001\002\000\004\055\146\001\002" +
    "\000\012\010\uffe8\016\uffe8\025\uffe8\065\uffe8\001\002\000" +
    "\006\060\uffe0\063\uffe0\001\002\000\006\015\177\065\174" +
    "\001\002\000\004\063\uffe3\001\002\000\014\017\215\020" +
    "\213\021\212\022\210\023\214\001\002\000\006\054\uffe4" +
    "\061\uffe4\001\002\000\006\010\uffff\025\uffff\001\002\000" +
    "\030\017\215\020\213\021\212\022\210\023\214\027\030" +
    "\030\036\031\034\032\021\033\044\034\017\001\002\000" +
    "\004\061\ufff5\001\002\000\004\061\233\001\002\000\004" +
    "\061\ufff4\001\002\000\050\004\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\014\ufffa\016\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa" +
    "\031\ufffa\032\ufffa\033\ufffa\034\ufffa\036\ufffa\044\ufffa\053" +
    "\ufffa\056\ufffa\065\ufffa\001\002\000\004\065\006\001\002" +
    "\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\022\012\023\007\025\011\031\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\012\023\007\025" +
    "\225\031\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\022\012\023\007\025\013\031\006\001\001\000" +
    "\002\001\001\000\004\024\015\001\001\000\024\006\031" +
    "\007\037\010\017\011\023\013\026\016\021\023\034\026" +
    "\040\031\006\001\001\000\002\001\001\000\020\006\031" +
    "\007\037\010\017\011\170\013\026\016\021\026\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\157\013\045\016\021\001" +
    "\001\000\010\006\155\013\045\016\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\127\013\045\016\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\022\012" +
    "\023\007\025\104\031\006\001\001\000\010\006\044\013" +
    "\045\016\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\006\031\007" +
    "\050\013\045\016\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\006\103\013\045\016" +
    "\021\001\001\000\010\006\102\013\045\016\021\001\001" +
    "\000\010\006\101\013\045\016\021\001\001\000\010\006" +
    "\100\013\045\016\021\001\001\000\010\006\077\013\045" +
    "\016\021\001\001\000\010\006\076\013\045\016\021\001" +
    "\001\000\010\006\075\013\045\016\021\001\001\000\010" +
    "\006\074\013\045\016\021\001\001\000\010\006\073\013" +
    "\045\016\021\001\001\000\002\001\001\000\010\006\072" +
    "\013\045\016\021\001\001\000\010\006\071\013\045\016" +
    "\021\001\001\000\010\006\070\013\045\016\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\006\031\007\037\010\017\011\106\013\026\016" +
    "\021\026\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\031\007\120\013\045\016" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\006\134" +
    "\013\045\016\021\001\001\000\006\026\112\031\133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\136\001\001\000\002\001\001\000\012\006" +
    "\031\007\140\013\045\016\021\001\001\000\002\001\001" +
    "\000\010\006\142\013\045\016\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\146\001\001\000\004" +
    "\024\151\001\001\000\002\001\001\000\004\012\150\001" +
    "\001\000\002\001\001\000\024\006\031\007\037\010\017" +
    "\011\152\013\026\016\021\023\034\026\040\031\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\006\162\013\045\016\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\165\001" +
    "\001\000\002\001\001\000\004\012\167\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\201\021\177\027\175\030\174\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\205\001\001\000\002\001\001" +
    "\000\012\020\201\021\203\027\175\030\174\001\001\000" +
    "\002\001\001\000\004\017\210\001\001\000\004\012\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\216\001\001\000\004\012" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\175\030\222\001\001\000\002\001\001\000\004\017" +
    "\224\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\015\230\016\231\017\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\031\133\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int outer_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int outer_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<DeclsOperationNode> outer_declaration = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int inner_declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int inner_declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VariableDeclarationOperationNode> inner_declaration = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<StatementOperationNode> statements = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new ProgramOperationNode(outer_declaration, inner_declaration, statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclsOperationNode> list = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0, (DeclsOperationNode) declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclsOperationNode> list = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0, (DeclsOperationNode) declaration);RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              ArrayList<DeclsOperationNode> RESULT =null;
		 ArrayList<DeclsOperationNode> list = new ArrayList<>();
        RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Decls",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              ArrayList<VariableDeclarationOperationNode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<VariableDeclarationOperationNode> list = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((VariableDeclarationOperationNode) declaration); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              ArrayList<VariableDeclarationOperationNode> RESULT =null;
		 ArrayList<VariableDeclarationOperationNode> list = new ArrayList<>();
                                    RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecls",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<VariableOptionalInitializerNodeOperator> vars = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeOrConstantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrConstantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object typeOrConstant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new VariableDeclarationOperationNode(vars,typeOrConstant);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VariableOptionalInitializerNodeOperator> list = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier))); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VariableOptionalInitializerNodeOperator> list = (ArrayList<VariableOptionalInitializerNodeOperator>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier), expression) );
                                                                            RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		                  ArrayList<VariableOptionalInitializerNodeOperator> list = new ArrayList<>();
                                            list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier)));
                                            RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              ArrayList<VariableOptionalInitializerNodeOperator> RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String identifier = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<VariableOptionalInitializerNodeOperator> list = new ArrayList<>();
                                                                               list.add(new VariableOptionalInitializerNodeOperator(new IdentifierNode(identifier),expression));
                                                                               RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=type;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int constantleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constantright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constant = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=constant;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		RESULT=Type.INTEGER;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;
		RESULT=Type.BOOLEAN;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		RESULT=Type.DOUBLE;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;
		RESULT=Type.STRING;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Object RESULT =null;
		RESULT=Type.CHAR;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Object RESULT =null;
		RESULT=new TrueConstantNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Object RESULT =null;
		RESULT=new FalseConstantNode();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int e = (int)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new IntegerConstNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		double e = (double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new DoubleConstNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		char e = (char)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new CharConstantNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=new StringConstantNode(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Constant",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<ParenthesisDeclarationOperationNode> declarations = (ArrayList<ParenthesisDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DefDeclarationNode(declarations, new IdentifierNode(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DefDeclarationNode(new IdentifierNode(id),type,body);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DefDecl",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              ArrayList<ParenthesisDeclarationOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParenthesisDeclarationOperationNode> list = (ArrayList<ParenthesisDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParenthesisDeclarationOperationNode)declaration); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              ArrayList<ParenthesisDeclarationOperationNode> RESULT =null;
		int declarationleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarationright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object declaration = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParenthesisDeclarationOperationNode> list = new ArrayList<>();
                    list.add((ParenthesisDeclarationOperationNode)declaration);
                    RESULT= list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecls",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParenthesisVariablesNode> list = (ArrayList<ParenthesisVariablesNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisDeclarationOperationNode(list,type);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              ArrayList<ParenthesisVariablesNode> RESULT =null;
		int pvarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pvarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object pvar = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParenthesisVariablesNode> list = (ArrayList<ParenthesisVariablesNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add((ParenthesisVariablesNode) pvar); RESULT=list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              ArrayList<ParenthesisVariablesNode> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object var = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		ArrayList<ParenthesisVariablesNode> list = new ArrayList<>();
                                                          list.add((ParenthesisVariablesNode) var);
                                                          RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVars",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisVariablesNode(false,new IdentifierNode(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new ParenthesisVariablesNode(true,new IdentifierNode(id));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PVar",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT=t;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Object RESULT =null;
		RESULT=null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OptType",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int declarationsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int declarationsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VariableDeclarationOperationNode> declarations = (ArrayList<VariableDeclarationOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<StatementOperationNode> statements = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT=new BodyOperationNode(declarations, statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              ArrayList<StatementOperationNode> RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<StatementOperationNode> list = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		list.add(0,(StatementOperationNode) statement); RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              ArrayList<StatementOperationNode> RESULT =null;
		 ArrayList<StatementOperationNode> list = new ArrayList<>();
                                                  RESULT = list;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Statements",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<IdentifierNode> vars_list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new ReadOperationNode(vars_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new WriteOperationNode(expression_list,false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new WriteOperationNode(expression_list,true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int vars_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vars_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<IdentifierNode> vars_list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expression_listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expression_listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExpressionOperationNode> expression_list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new AssignOperationNode(vars_list,expression_list);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int function_callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int function_callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object function_call = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= function_call;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ifBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenElseOperationNode(expression,ifBody,elseBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ifBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ifBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new IfThenOperationNode(expression,ifBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= LET_FUN Decls IN_FUN Statements END LET_FUN SEMI 
            {
              Object RESULT =null;
		int declleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int declright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<DeclsOperationNode> decl = (ArrayList<DeclsOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<StatementOperationNode> statements = (ArrayList<StatementOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT= new LetOperationNode(decl, statements);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= WHILE LPAR Expr RPAR DO Body ELSELOOP Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object whileBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elseLoopBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseLoopBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elseLoopBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileElseLoopNode(expression,whileBody,elseLoopBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object expression = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int whileBodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileBodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object whileBody = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= new WhileOperationNode(expression,whileBody);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT= new ReturnStatementNode(e);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Vars ::= ID PIPE Vars 
            {
              ArrayList<IdentifierNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<IdentifierNode> list = (ArrayList<IdentifierNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add(new IdentifierNode(attrib));
                                     RESULT = list;
                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Vars ::= ID 
            {
              ArrayList<IdentifierNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<IdentifierNode> list = new ArrayList<>();
                    list.add(new IdentifierNode(attrib));
                    RESULT = list;
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Vars",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exprs ::= Expr COMMA Exprs 
            {
              ArrayList<ExpressionOperationNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ExpressionOperationNode> list = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 list.add((ExpressionOperationNode) attrib);
                                          RESULT = list;
                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exprs ::= Expr 
            {
              ArrayList<ExpressionOperationNode> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<ExpressionOperationNode> list = new ArrayList<>();
                       list.add((ExpressionOperationNode) attrib);
                       RESULT = list;
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Exprs",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int refleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int refright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<ExpressionOperationNode> ref = (ArrayList<ExpressionOperationNode>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallNode(new IdentifierNode(attrib), ref);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallNode(new IdentifierNode(attrib)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"PLUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"MINUS",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"TIMES",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new BinaryOperationNode(e1,"DIV",e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"AND",e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"OR",e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"GT",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"GE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"LT",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"LE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"EQ",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationNode(e1,"NE",e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e1;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationNode("MINUS",e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationNode("NOT",e1);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierNode(id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Constant 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT= e1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
